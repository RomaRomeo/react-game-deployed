{"ast":null,"code":"import _toConsumableArray from\"/Users/macbookpro/Documents/projects/react-memory-game-4.5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/macbookpro/Documents/projects/react-memory-game-4.5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Board from'./components/board-component/board-component';import initializeDeck from'./deck';export default function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),flipped=_useState4[0],setFlipped=_useState4[1];var _useState5=useState(400),_useState6=_slicedToArray(_useState5,2),dimension=_useState6[0],setDimension=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),solved=_useState8[0],setSolved=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),disabled=_useState10[0],setDisabled=_useState10[1];useEffect(function(){resizeBoard();setCards(initializeDeck());},[]);useEffect(function(){preloadImages();},cards);useEffect(function(){var resizeListener=window.addEventListener('resize',resizeBoard);return function(){return window.removeEventListener('resize',resizeListener);};});var handleClick=function handleClick(id){setDisabled(true);if(flipped.length===0){setFlipped([id]);setDisabled(false);}else{if(sameCardClicked(id))return;setFlipped([flipped[0],id]);if(isMatch(id)){setSolved([].concat(_toConsumableArray(solved),[flipped[0],id]));resetCards();}else{setTimeout(resetCards,2000);}}};var preloadImages=function preloadImages(){cards.map(function(card){var src=\"/img/\".concat(card.type,\".png\");new Image().src=src;});};var resetCards=function resetCards(){setFlipped([]);setDisabled(false);};var sameCardClicked=function sameCardClicked(id){return flipped.includes(id);};var isMatch=function isMatch(id){var clickedCard=cards.find(function(card){return card.id===id;});var flippedCard=cards.find(function(card){return flipped[0]===card.id;});return flippedCard.type===clickedCard.type;};var resizeBoard=function resizeBoard(){setDimension(Math.min(document.documentElement.clientWidth,document.documentElement.clientHeight));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Memory Game\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Can you remember where this cards are?\"),/*#__PURE__*/React.createElement(Board,{dimension:dimension,cards:cards,flipped:flipped,handleClick:handleClick,disabled:disabled,solved:solved}));}","map":{"version":3,"sources":["/Users/macbookpro/Documents/projects/react-memory-game-4.5/src/App.js"],"names":["React","useState","useEffect","Board","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Board from './components/board-component/board-component'\nimport initializeDeck from './deck'\n\nexport default function App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    preloadImages()\n  }, cards)\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length===0) {\n    setFlipped([id])\n    setDisabled(false)\n    } else {\n      if (sameCardClicked(id)) return\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 2000)\n      }\n    }\n  }  \n\n  const preloadImages = () => {\n    cards.map((card) => {\n    const src = `/img/${card.type}.png`\n    new Image().src = src\n    })\n  }\n\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight,\n      ),\n    )\n  }\n\n  return (\n    <div>\n      <h1>Memory Game</h1>\n      <h2>Can you remember where this cards are?</h2>\n\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}