{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/projects/react-memory-game-4/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/board-component/board-component';\nimport initializeDeck from './deck';\nexport default function App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  const preloadImages = () => {\n    cards.map(card => {\n      const src = `/img/${card.type}.png`;\n      new Image().src = src;\n    });\n  };\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n  useEffect(() => {\n    preloadImages();\n  }, cards);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Memory Game\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Can you remember where this cards are?\"), /*#__PURE__*/React.createElement(Board, {\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/macbookpro/Documents/projects/react-memory-game-4/src/App.js"],"names":["React","useState","useEffect","Board","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","preloadImages","map","card","src","type","Image","resizeBoard","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Board from './components/board-component/board-component'\nimport initializeDeck from './deck'\n\nexport default function App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  const preloadImages = () => {\n    cards.map((card) => {\n    const src = `/img/${card.type}.png`\n    new Image().src = src\n    })\n  }\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    preloadImages()\n  }, cards)\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length===0) {\n    setFlipped([id])\n    setDisabled(false)\n    } else {\n      if (sameCardClicked(id)) return\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 2000)\n      }\n    }\n  }  \n\n  \n\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight,\n      ),\n    )\n  }\n\n  return (\n    <div>\n      <h1>Memory Game</h1>\n      <h2>Can you remember where this cards are?</h2>\n\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}